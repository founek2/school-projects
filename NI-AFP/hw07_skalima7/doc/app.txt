-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/app#readme</a>
@package app
@version 0.1.0.0

module Lib.DataTypes

-- | Container for Debt record data
data Debt
Debt :: String -> Double -> Maybe String -> UTCTime -> Debt
[$sel:person:Debt] :: Debt -> String
[$sel:amount:Debt] :: Debt -> Double
[$sel:note:Debt] :: Debt -> Maybe String
[$sel:timestamp:Debt] :: Debt -> UTCTime

-- | Container for Debt diary data
data Diary
Diary :: String -> String -> [Debt] -> Diary
[$sel:title:Diary] :: Diary -> String
[$sel:note:Diary] :: Diary -> String
[$sel:records:Diary] :: Diary -> [Debt]
data Error
IndexOutOfRange :: Error
IndexMustBeNumber :: Error
InputMustBeNumber :: Error
UnableReadFile :: Error
UnableWriteFile :: Error
UnableToDecodeJSON :: Error
instance Data.Aeson.Types.FromJSON.FromJSON Lib.DataTypes.Debt
instance Data.Aeson.Types.ToJSON.ToJSON Lib.DataTypes.Debt
instance GHC.Classes.Eq Lib.DataTypes.Debt
instance GHC.Show.Show Lib.DataTypes.Debt
instance GHC.Generics.Generic Lib.DataTypes.Debt
instance Data.Aeson.Types.FromJSON.FromJSON Lib.DataTypes.Diary
instance Data.Aeson.Types.ToJSON.ToJSON Lib.DataTypes.Diary
instance GHC.Classes.Eq Lib.DataTypes.Diary
instance GHC.Show.Show Lib.DataTypes.Diary
instance GHC.Generics.Generic Lib.DataTypes.Diary
instance GHC.Classes.Eq Lib.DataTypes.Error
instance GHC.Read.Read Lib.DataTypes.Error
instance GHC.Show.Show Lib.DataTypes.Error

module Lib.Formatting

-- | The <a>prettify</a> function converts debt diary into human readable
--   text
--   
--   <pre>
--   &gt;&gt;&gt; prettify diary
--   "Diary title
--    diary note
--    records:
--    Idx: 0
--      person: John Doe",
--      note:
--      amount: 14.14
--      ts: 2011-11-19"
--   </pre>
prettify :: Diary -> String

-- | The <a>prettifyNth</a> function converts nth debt record into human
--   readable text
--   
--   <pre>
--   &gt;&gt;&gt; prettifyNth idx diary
--   "Idx: 1
--     person: John Doe
--     note:
--     amount: 22.22
--     ts: 2022-11-1"
--   </pre>
prettifyNth :: Int -> Diary -> String

-- | The <a>prettifyTable</a> sum debt per user and converts into human
--   readable table
--   
--   <pre>
--   &gt;&gt;&gt; prettifyTable diary
--   "| Name     | Amount |
--    | John Doe | 36.36  |"
--   </pre>
prettifyTable :: Diary -> String

-- | The <a>prettifyBalance</a> sum all debt and create human readable
--   string
--   
--   <pre>
--   &gt;&gt;&gt; prettifyBalance diary
--   "Balance: 300.33"
--   </pre>
prettifyBalance :: Diary -> String

-- | The <a>newLines</a> function joins list of string with new line
--   character.
--   
--   <pre>
--   &gt;&gt;&gt; newLines ["a", "b", "c"]
--   "a\nb\nc"
--   </pre>
newLines :: [String] -> String

module Lib.Logics

-- | The <a>deleteRecord</a> function deletes specified record by index
--   from diary
--   
--   <pre>
--   &gt;&gt;&gt; deleteRecord 0 diary
--   </pre>
deleteRecord :: Int -> Diary -> Diary

-- | The <a>appendRecord</a> function append debt record to diary
--   
--   <pre>
--   &gt;&gt;&gt; appendRecord record diary
--   </pre>
appendRecord :: Debt -> Diary -> Diary

-- | The <a>updateRecord</a> function updates record in diary at specified
--   index. If index does not exists, it will append record
--   
--   <pre>
--   &gt;&gt;&gt; updateRecord 0 record diary
--   </pre>
updateRecord :: Int -> Debt -> Diary -> Diary

-- | The <a>maxRecordIdx</a> function calculates maximal record index.
--   
--   <pre>
--   &gt;&gt;&gt; maxRecordIdx diary
--   5
--   </pre>
maxRecordIdx :: Diary -> Int

module Lib.Operations

-- | The <a>parseDiary</a> function reads file from specified file path and
--   decodes Diary from it's content (in JSON format). Error handles
--   invalid access to file or invalid format.
--   
--   <pre>
--   &gt;&gt;&gt; parseDiary "debt-diary.json"
--   Diary "Fancy title" "note" []
--   </pre>
parseDiary :: FilePath -> IO (Either Error Diary)

-- | The <a>apply</a> function takes function and value, passes value to
--   function and checks result Whenever Left is encountered, it calls
--   <a>exitWithErrorMessage</a>
apply :: (a -> IO (Either Error b)) -> a -> IO ()

-- | The <a>apply2</a> function takes function and parameter, extracts
--   Right from parameter and pass it's value to function. Checks result of
--   function and returns Right value. Whenever Left is encountered, it
--   calls <a>exitWithErrorMessage</a>
apply2 :: Show a => (b -> IO (Either Error c)) -> Either a b -> IO ()

-- | The <a>loadIndex</a> function checks wheter value can be used as index
--   Checks idx &gt;= 0 &amp;&amp; &lt;= upperBound
loadIndex :: String -> Int -> Either Error Int

-- | The <a>saveDiary</a> function encodes diary into JSON and saves to
--   filePath. Error handles invalid write access.
--   
--   <pre>
--   &gt;&gt;&gt; saveDiary "debt-diary.json" diary
--   </pre>
saveDiary :: FilePath -> Diary -> IO (Either Error ())

-- | The <a>promptDebtRecord</a> function promts user for data and returns
--   new Debt
promptDebtRecord :: IO Debt

-- | The <a>promptDiary</a> function promts user for data and returns new
--   Diary
promptDiary :: IO Diary

-- | The <a>exitWithErrorMessage</a> function prints message to stderr and
--   exit with status 2
--   
--   <pre>
--   &gt;&gt;&gt; exitWithErrorMessage UnableReadFile
--   </pre>
exitWithErrorMessage :: Show s => s -> IO ()

module DebtDiary

-- | The <a>runCli</a> function parses cli arguments and runs appropriate
--   actions.
runCli :: IO ()
